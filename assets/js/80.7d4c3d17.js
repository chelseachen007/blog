(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{451:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"webpack-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-实现"}},[t._v("#")]),t._v(" Webpack 实现")]),t._v(" "),a("h2",{attrs:{id:"流程提炼"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程提炼"}},[t._v("#")]),t._v(" 流程提炼")]),t._v(" "),a("p",[t._v("我们先提炼出 Webpack 核心工作过程中的关键环节，明确“查阅”源码的思路：")]),t._v(" "),a("ul",[a("li",[t._v("Webpack CLI 启动打包流程；")]),t._v(" "),a("li",[t._v("载入 Webpack 核心模块，创建 Compiler 对象；")]),t._v(" "),a("li",[t._v("使用 Compiler 对象开始编译整个项目；")]),t._v(" "),a("li",[t._v("从入口文件开始，解析模块依赖，形成依赖关系树；")]),t._v(" "),a("li",[t._v("递归依赖树，将每个模块交给对应的 Loader 处理；")]),t._v(" "),a("li",[t._v("合并 Loader 处理完的结果，将打包结果输出到 dist 目录。")])]),t._v(" "),a("h2",{attrs:{id:"hook-的使用方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hook-的使用方式"}},[t._v("#")]),t._v(" Hook 的使用方式")]),t._v(" "),a("p",[t._v("Hook 的使用分为四步：")]),t._v(" "),a("ol",[a("li",[t._v("在构造函数中定义 Hook 类型和参数，生成 Hook 对象。")]),t._v(" "),a("li",[t._v("在插件中注册 Hook，添加对应 Hook 触发时的执行函数。")]),t._v(" "),a("li",[t._v("生成插件实例，运行 apply 方法。")]),t._v(" "),a("li",[t._v("在运行到对应生命周期节点时调用 Hook，执行注册过的插件的回调函数。如下面的代码所示：")])]),t._v(" "),a("div",{staticClass:"language-JavaScript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Compiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hooks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  make"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SyncHook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'compilation'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'params'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1. 定义Hook")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hooks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compilation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compilation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4. 调用Hook")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\nlib"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("dependencies"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("CommonJsPlugin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2. 在插件中注册Hook")]),t._v("\ncompiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hooks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compilation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"CommonJSPlugin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compilation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" contextModuleFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" normalModuleFactory "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlib"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("WebpackOptionsApply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3. 生成插件实例，运行apply方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommonJsPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compiler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("以上就是 Webpack 中 Hook 的一般使用方式。正是通过这种方式，Webpack 将编译器和编译过程的生命周期节点提供给外部插件，从而搭建起弹性化的工作引擎。")]),t._v(" "),a("h2",{attrs:{id:"compiler-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiler-hooks"}},[t._v("#")]),t._v(" Compiler Hooks")]),t._v(" "),a("p",[t._v("构建器实例的生命周期可以分为 3 个阶段：初始化阶段、构建过程阶段、产物生成阶段。下面我们就来大致介绍下这些不同阶段的 Hooks ：")]),t._v(" "),a("p",[a("strong",[t._v("初始化阶段")])]),t._v(" "),a("ul",[a("li",[t._v("environment、afterEnvironment：在创建完 compiler 实例且执行了配置内定义的插件的 apply 方法后触发。")]),t._v(" "),a("li",[t._v("entryOption、afterPlugins、afterResolvers：在 WebpackOptionsApply.js 中，这 3 个 Hooks 分别在执行 EntryOptions 插件和其他 Webpack 内置插件，以及解析了 resolver 配置后触发。")])]),t._v(" "),a("p",[a("strong",[t._v("构建过程阶段")])]),t._v(" "),a("ul",[a("li",[t._v("normalModuleFactory、contextModuleFactory：在两类模块工厂创建后触发。")]),t._v(" "),a("li",[t._v("beforeRun、run、watchRun、beforeCompile、compile、thisCompilation、compilation、make、afterCompile：在运行构建过程中触发。")])]),t._v(" "),a("p",[a("strong",[t._v("产物生成阶段")])]),t._v(" "),a("ul",[a("li",[t._v("shouldEmit、emit、assetEmitted、afterEmit：在构建完成后，处理产物的过程中触发。")]),t._v(" "),a("li",[t._v("failed、done：在达到最终结果状态时触发。")])]),t._v(" "),a("h2",{attrs:{id:"compilation-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compilation-hooks"}},[t._v("#")]),t._v(" Compilation Hooks")]),t._v(" "),a("p",[t._v("构建过程实例的生命周期我们分为两个阶段：")]),t._v(" "),a("p",[a("strong",[t._v("构建阶段")])]),t._v(" "),a("ul",[a("li",[t._v("addEntry、failedEntry、succeedEntry：在添加入口和添加入口结束时触发（Webpack 5 中移除）。")]),t._v(" "),a("li",[t._v("buildModule、rebuildModule、finishRebuildingModule、failedModule、succeedModule：在构建单个模块时触发。")]),t._v(" "),a("li",[t._v("finishModules：在所有模块构建完成后触发。")])]),t._v(" "),a("p",[a("strong",[t._v("优化阶段")])]),t._v(" "),a("p",[t._v("优化阶段在 seal 函数中共有 12 个主要的处理过程，如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2021/03/03/JyxCMHmq247XNU9.png",alt:"image (4).png"}})]),t._v(" "),a("p",[t._v("每个过程都暴露了相应的 Hooks，分别如下:")]),t._v(" "),a("ul",[a("li",[t._v("seal、needAdditionalSeal、unseal、afterSeal：分别在 seal 函数的起始和结束的位置触发。")]),t._v(" "),a("li",[t._v("optimizeDependencies、afterOptimizeDependencies：触发优化依赖的插件执行，例如 FlagDependencyUsagePlugin。")]),t._v(" "),a("li",[t._v("beforeChunks、afterChunks：分别在生成 Chunks 的过程的前后触发。")]),t._v(" "),a("li",[t._v("optimize：在生成 chunks 之后，开始执行优化处理的阶段触发。")]),t._v(" "),a("li",[t._v("optimizeModule、afterOptimizeModule：在优化模块过程的前后触发。")]),t._v(" "),a("li",[t._v("optimizeChunks、afterOptimizeChunks：在优化 Chunk 过程的前后触发，用于 "),a("a",{attrs:{href:"https://webpack.js.org/guides/tree-shaking/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tree Shaking"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("li",[t._v("optimizeTree、afterOptimizeTree：在优化模块和 Chunk 树过程的前后触发。")]),t._v(" "),a("li",[t._v("optimizeChunkModules、afterOptimizeChunkModules：在优化 ChunkModules 的过程前后触发，例如 ModuleConcatenationPlugin，利用这一 Hook 来做"),a("a",{attrs:{href:"https://webpack.js.org/plugins/module-concatenation-plugin/#optimization-bailouts",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scope Hoisting"),a("OutboundLink")],1),t._v("的优化。")]),t._v(" "),a("li",[t._v("shouldRecord、recordModules、recordChunks、recordHash：在 shouldRecord 返回为 true 的情况下，依次触发 recordModules、recordChunks、recordHash。")]),t._v(" "),a("li",[t._v("reviveModules、beforeModuleIds、moduleIds、optimizeModuleIds、afterOptimizeModuleIds：在生成模块 Id 过程的前后触发。")]),t._v(" "),a("li",[t._v("reviveChunks、beforeChunkIds、optimizeChunkIds、afterOptimizeChunkIds：在生成 Chunk id 过程的前后触发。")]),t._v(" "),a("li",[t._v("beforeHash、afterHash：在生成模块与 Chunk 的 hash 过程的前后触发。")]),t._v(" "),a("li",[t._v("beforeModuleAssets、moduleAsset：在生成模块产物数据过程的前后触发。")]),t._v(" "),a("li",[t._v("shouldGenerateChunkAssets、beforeChunkAssets、chunkAsset：在创建 Chunk 产物数据过程的前后触发。")]),t._v(" "),a("li",[t._v("additionalAssets、optimizeChunkAssets、afterOptimizeChunkAssets、optimizeAssets、afterOptimizeAssets：在优化产物过程的前后触发，例如在 TerserPlugin 的"),a("a",{attrs:{href:"https://github.com/webpack-contrib/terser-webpack-plugin/blob/master/src/index.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("压缩代码"),a("OutboundLink")],1),t._v("插件的执行过程中，就用到了 optimizeChunkAssets。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);