(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{404:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前端函数式演进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端函数式演进"}},[t._v("#")]),t._v(" 前端函数式演进")]),t._v(" "),s("h2",{attrs:{id:"编程范式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程范式"}},[t._v("#")]),t._v(" 编程范式")]),t._v(" "),s("p",[t._v("我们经常接触的有以下两种。")]),t._v(" "),s("ol",[s("li",[t._v("告诉机器怎么利用穷举、跳转和记忆，逐步完成我们交付的事情（ "),s("strong",[t._v("命令式")]),t._v(" )")]),t._v(" "),s("li",[t._v("告诉机器我们想要什么（"),s("strong",[t._v("声明式")]),t._v("），由机器按照已在编译器中实现的策略来完成任务。")])]),t._v(" "),s("h3",{attrs:{id:"命令式编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令式编程"}},[t._v("#")]),t._v(" 命令式编程")]),t._v(" "),s("p",[t._v("我们一般将命令式编程理解为顺序编程加一些控制流程的语句，比如运算语句、循环语句（while、for）、条件分支语句（if）、无条件分支语句（goto、程序调用）。")]),t._v(" "),s("h3",{attrs:{id:"面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),s("p",[t._v("面向对象把计算机程序视为一组对象的集合，而每个对象都可以接收并处理其他对象发来的消息，换句话说，面向对象认为计算机程序的执行过程就是一系列消息在各个对象之间的传递。")]),t._v(" "),s("p",[t._v("框架中的组件概念。大家可以暂时放下Class类的内容，思考一下组件或者前端的业务模块是怎样实现继承（扩展）、封装、多态和消息传递的。是不是就是一种面向对象变成的例子")]),t._v(" "),s("h3",{attrs:{id:"元编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元编程"}},[t._v("#")]),t._v(" 元编程")]),t._v(" "),s("p",[t._v("在元编程模式下执行开发者编写的代码时，可以改变其他程序（或者自身）的行为，或者在运行代码时完成部分本应在代码编译时完成的工作。")]),t._v(" "),s("h2",{attrs:{id:"函数式编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[t._v("#")]),t._v(" 函数式编程")]),t._v(" "),s("p",[t._v("函数式编程思维的目标：程序执行时，应该把程序对结果以外的数据的影响控制到最小。")]),t._v(" "),s("h3",{attrs:{id:"副作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#副作用"}},[t._v("#")]),t._v(" 副作用")]),t._v(" "),s("p",[t._v("副作用（Side Effect）的主体是一个“过程”，即我们在命令式编程中提到的函数、方法等。副作用指这个“过程”运行后，不只是对传入值操作产生传出值，还对这两个值以外的部分产生了影响。")]),t._v(" "),s("h3",{attrs:{id:"react-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-hooks"}},[t._v("#")]),t._v(" react hooks")]),t._v(" "),s("p",[t._v("在类组件中，我们使用成员方法带来配置型声明式的编码风格，Hooks的设计思想是使用升级版的函数式组件，以更清晰的过程来厘清事件流转。这也是我认为React使用Hooks后的理想方向。ReactHooks的官方介绍中提到了Hooks的“动机”，其中包含组件之间复用状态逻辑的便捷化、复杂组件易理解程度等内容。React在类组件非常成熟的情况下推动这些特性，是为了实现React事件流的清晰化。")]),t._v(" "),s("h4",{attrs:{id:"usestate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[t._v("#")]),t._v(" useState")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申明变量_state、生成标记")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申明两个方法，分别对应useState所在函数组件和它被调用镶嵌的位置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" _state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _genIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reRenderThisComponet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" （state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" contextCptFunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("contextCptFunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("componetAnchorPosition")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("contextCptFunc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCptParentPosition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("contextCptFunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("initialState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" contextCptFunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" currentIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _genIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("currentIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" _state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("currentIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" initialState "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("setState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newState")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("currentIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在外层重新render调用state的组件, 虚拟调用")]),t._v("\n    ReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reRenderThisComponet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" contextCptFunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      componetAnchorPosition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _genIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  _genIndex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("_state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("currentIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("React Hooks的意义更多是承担函数组件之间的衔接和调用作用。")]),t._v(" "),s("h2",{attrs:{id:"前端稳定性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端稳定性"}},[t._v("#")]),t._v(" 前端稳定性")]),t._v(" "),s("h3",{attrs:{id:"用户交互时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户交互时"}},[t._v("#")]),t._v(" 用户交互时")]),t._v(" "),s("p",[t._v("React的Fiber思想和游戏、动画按帧渲染一样，都是追求间隙稳定态的表现。")]),t._v(" "),s("p",[s("strong",[t._v("SPA的优势在于能通过Web应用间的高耦合结构，提前部署业务逻辑更多的可能性并做一些预处理工作，进而大量节省网络通信和服务端负载的成本，提供更流畅的交互体验。SPA最大的缺点是冗余数据集中性能消耗大，在保障前端数据安全时会存在更大的负担。")])]),t._v(" "),s("h3",{attrs:{id:"代码编译时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码编译时"}},[t._v("#")]),t._v(" 代码编译时")]),t._v(" "),s("p",[t._v("一些代码编译时常用的辅助工具，比如Webpack打包构建工具，同时集成了Babel适配、Typescript转换、Lint检校，以及一些框架如Vue的模板解析能力")]),t._v(" "),s("h3",{attrs:{id:"系统开发时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统开发时"}},[t._v("#")]),t._v(" 系统开发时")]),t._v(" "),s("p",[t._v("使用Redux之类的工具会增加前端代码运行的圈复杂度，加之前端分层类型的多样性，维护者很难基于历史代码梳理已有的业务逻辑。如果我们将核心代码更换成较为合理的函数式逻辑，或者使用函数式工具和规范对已有逻辑进行归纳，就可以明显提高代码的可读性和代码运行时的可调试性，这也是对历史代码进行升级、改造的方法之一。")])])}),[],!1,null,null,null);a.default=e.exports}}]);