(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{544:function(t,a,r){"use strict";r.r(a);var e=r(42),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"根据前序和后序遍历构造二叉树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#根据前序和后序遍历构造二叉树"}},[t._v("#")]),t._v(" 根据前序和后序遍历构造二叉树")]),t._v(" "),r("h2",{attrs:{id:"题目描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),r("blockquote",[r("p",[t._v("返回与给定的前序和后序遍历匹配的任何二叉树。")]),t._v(" "),r("p",[t._v("pre 和 post 遍历中的值是不同的正整数。")]),t._v(" "),r("p",[t._v("示例：")]),t._v(" "),r("p",[t._v("输入：pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]\n输出：[1,2,3,4,5,6,7]")]),t._v(" "),r("p",[t._v("提示：")]),t._v(" "),r("p",[t._v("1 <= pre.length == post.length <= 30\npre[] 和 post[] 都是 1, 2, ..., pre.length 的排列\n每个输入保证至少有一个答案。如果有多个答案，可以返回其中一个。")]),t._v(" "),r("p",[t._v("来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])]),t._v(" "),r("h2",{attrs:{id:"我的回答"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#我的回答"}},[t._v("#")]),t._v(" 我的回答")]),t._v(" "),r("h3",{attrs:{id:"解法一"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解法一"}},[t._v("#")]),t._v(" 解法一")]),t._v(" "),r("h4",{attrs:{id:"时空复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#时空复杂度"}},[t._v("#")]),t._v(" 时空复杂度")]),t._v(" "),r("p",[t._v("时间复杂度：O(n)")]),t._v(" "),r("p",[t._v("空间复杂度: O(1)")]),t._v(" "),r("div",{staticClass:"language-JavaScript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[t._v("\n")])])]),r("h2",{attrs:{id:"参考回答"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考回答"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),r("ul",[r("li")])])}),[],!1,null,null,null);a.default=s.exports}}]);