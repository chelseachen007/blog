(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{395:function(t,a,s){"use strict";s.r(a);var r=s(42),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"v8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v8"}},[t._v("#")]),t._v(" V8")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/03/02/FgODzcwWX8dYr1f.jpg",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"函数即对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数即对象"}},[t._v("#")]),t._v(" 函数即对象")]),t._v(" "),s("p",[t._v("函数除了可以拥有常用类型的属性值之外，还拥有两个隐藏属性，分别是 name 属性和 code 属性。隐藏 name 属性的值就是函数名称，如果某个函数没有设置函数名，该函数对象的"),s("strong",[t._v("默认的 name 属性值就是 anonymous。")])]),t._v(" "),s("h3",{attrs:{id:"函数是一等公民"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数是一等公民"}},[t._v("#")]),t._v(" 函数是一等公民")]),t._v(" "),s("p",[t._v("因为函数是一种特殊的对象，所以在 JavaScript 中，函数可以赋值给一个变量，也可以作为函数的参数，还可以作为函数的返回值。"),s("strong",[t._v("如果某个编程语言的函数，可以和这个语言的数据类型做一样的事情，我们就把这个语言中的函数称为一等公民")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"对象的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的属性"}},[t._v("#")]),t._v(" 对象的属性")]),t._v(" "),s("h4",{attrs:{id:"排序属性和常规属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序属性和常规属性"}},[t._v("#")]),t._v(" "),s("strong",[t._v("排序属性")]),t._v("和常规属性")]),t._v(" "),s("p",[t._v("我们把对象中的数字属性称为"),s("strong",[t._v("排序属性")]),t._v("，在 V8 中被称为 "),s("strong",[t._v("elements")]),t._v("，字符串属性就被称为"),s("strong",[t._v("常规属性")]),t._v("，在 V8 中被称为 "),s("strong",[t._v("properties")])]),t._v(" "),s("p",[s("strong",[t._v("数字属性按照索引值大小升序排列，字符串属性根据创建时的顺序升序排列。")])]),t._v(" "),s("h4",{attrs:{id:"快属性和慢属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快属性和慢属性"}},[t._v("#")]),t._v(" 快属性和慢属性")]),t._v(" "),s("p",[t._v("将不同的属性分别保存到 elements 属性和 properties 属性中，无疑简化了程序的复杂度，但是在查找元素时，却多了一步操作，基于这个原因，V8 采取了一个权衡的策略以加快查找属性的效率，这个策略是将部分常规属性直接存储到对象本身，我们把这称为"),s("strong",[t._v("对象内属性 (in-object properties)。")])]),t._v(" "),s("p",[t._v("通常，我们将保存在线性数据结构中的属性称之为“"),s("strong",[t._v("快属性")]),t._v("”，因为线性数据结构中只需要通过索引即可以访问到属性，虽然访问线性结构的速度快，但是如果从线性结构中添加或者删除大量的属性时，则执行效率会非常低，这主要因为会产生大量时间和内存开销。不过对象内属性的数量是固定的，默认是 10 个，")]),t._v(" "),s("p",[t._v("如果一个对象的属性过多时，V8 就会采取另外一种存储策略，那就是“"),s("strong",[t._v("慢属性")]),t._v("”策略，但慢属性的对象内部会有独立的非线性数据结构 (词典) 作为属性存储容器。所有的属性元信息不再是线性存储的，而是"),s("strong",[t._v("直接保存在属性字典")]),t._v("中。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/03/02/LAtHREnFWKIx8pm.jpg",alt:"img"}})]),t._v(" "),s("h4",{attrs:{id:"内存查看"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存查看"}},[t._v("#")]),t._v(" 内存查看")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("property_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element_num")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//添加可索引属性")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" element_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("element")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//添加常规属性")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" property_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ppt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("property")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ppt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ppt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Chrome 开发者工具切换到 Memory 标签，然后点击左侧的小圆圈就可以捕获当前的内存快照,查看创建不同数量属性的内存存储区别")]),t._v(" "),s("p",[t._v("// todo:和老师讲的有点不一样")]),t._v(" "),s("h3",{attrs:{id:"v8-是怎么实现数组的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v8-是怎么实现数组的"}},[t._v("#")]),t._v(" V8 是怎么实现数组的")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6847902222009925640#heading-7",target:"_blank",rel:"noopener noreferrer"}},[t._v('从 V8 引擎来看 JS 中这个"假数组"'),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("数组是什么？ 数组的两个关键字是"),s("strong",[t._v("相同类型")]),t._v("、"),s("strong",[t._v("连续内存")]),t._v(" !")]),t._v(" "),s("p",[t._v("所以 Js 的数组根本不算一个真数组，那么他是怎么实现的呢")]),t._v(" "),s("p",[t._v("没错就是 对象，")]),t._v(" "),s("h4",{attrs:{id:"快数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快数组"}},[t._v("#")]),t._v(" 快数组")]),t._v(" "),s("h4",{attrs:{id:"慢数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#慢数组"}},[t._v("#")]),t._v(" 慢数组")]),t._v(" "),s("h2",{attrs:{id:"原型链和作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链和作用域链"}},[t._v("#")]),t._v(" 原型链和作用域链")]),t._v(" "),s("p",[s("strong",[t._v("作用域链是沿着函数的作用域一级一级来查找变量的，而原型链是沿着对象的原型一级一级来查找属性的")])]),t._v(" "),s("h3",{attrs:{id:"解析阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析阶段"}},[t._v("#")]),t._v(" 解析阶段")]),t._v(" "),s("p",[t._v("V8 会先编译顶层代码，在编译过程中会将顶层定义的变量和声明的函数都添加到全局作用域中，")]),t._v(" "),s("p",[t._v("全局作用域创建完毕后")]),t._v(" "),s("h3",{attrs:{id:"进入执行阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进入执行阶段"}},[t._v("#")]),t._v(" 进入执行阶段")]),t._v(" "),s("p",[t._v("变量：对全局作用域的值进行赋值，")]),t._v(" "),s("p",[t._v("函数的时候，同样需要经历两个阶段：编译和执行。在编译阶段，V8 会为 bar 函数创建函数作用域，执行阶段简单的执行 code")]),t._v(" "),s("p",[s("strong",[t._v("因为词法作用域是根据函数在代码中的位置来确定的，作用域是在声明函数时就确定好的了，所以我们也将词法作用域称为静态作用域。")])]),t._v(" "),s("p",[t._v("和静态作用域相对的是动态作用域，动态作用域并不关心函数和作用域是如何声明以及在何处声明的，只关心它们从何处调用。换句话说，作用域链是基于调用栈的，而不是基于函数定义的位置的。")]),t._v(" "),s("h3",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),s("p",[s("strong",[t._v("在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。比如外部函数是 foo，那么这些变量的集合就称为 foo 函数的闭包")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"如何回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何回收"}},[t._v("#")]),t._v(" 如何回收")]),t._v(" "),s("p",[t._v("通常，如果引用闭包的函数是一个全局变量，那么闭包会一直存在直到页面关闭；但如果这个闭包以后不再使用的话，就会造成内存泄漏。")]),t._v(" "),s("p",[t._v("如果引用闭包的函数是个局部变量，等函数销毁后，在下次 JavaScript 引擎执行垃圾回收时，判断闭包这块内容如果已经不再被使用了，那么 JavaScript 引擎的垃圾回收器就会回收这块内存。")]),t._v(" "),s("h2",{attrs:{id:"类型系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型系统"}},[t._v("#")]),t._v(" 类型系统")]),t._v(" "),s("h3",{attrs:{id:"v8-是怎么执行加法操作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v8-是怎么执行加法操作的"}},[t._v("#")]),t._v(" V8 是怎么执行加法操作的？")]),t._v(" "),s("ol",[s("li",[t._v("把第一个表达式 (AdditiveExpression) 的值赋值给左引用 (lref)。")]),t._v(" "),s("li",[t._v("使用 GetValue(lref) 获取左引用 (lref) 的计算结果，并赋值给左值。")]),t._v(" "),s("li",[t._v("使用 ReturnIfAbrupt(lval) 如果报错就返回错误。")]),t._v(" "),s("li",[t._v("把第二个表达式 (MultiplicativeExpression) 的值赋值给右引用 (rref)。")]),t._v(" "),s("li",[t._v("使用 GetValue(rref) 获取右引用 (rref) 的计算结果，并赋值给 rval。")]),t._v(" "),s("li",[t._v("使用 ReturnIfAbrupt(rval) 如果报错就返回错误。")]),t._v(" "),s("li",[t._v("使用 ToPrimitive(lval) 获取左值 (lval) 的计算结果，并将其赋值给左原生值 (lprim)。")]),t._v(" "),s("li",[t._v("使用 ToPrimitive(rval) 获取右值 (rval) 的计算结果，并将其赋值给右原生值 (rprim)。")]),t._v(" "),s("li",[t._v("如果 Type(lprim) 和 Type(rprim) 中有一个是 String，则：\n"),s("ul",[s("li",[t._v("把 ToString(lprim) 的结果赋给左字符串 (lstr)；")]),t._v(" "),s("li",[t._v("把 ToString(rprim) 的结果赋给右字符串 (rstr)；")]),t._v(" "),s("li",[t._v("返回左字符串 (lstr) 和右字符串 (rstr) 拼接的字符串。")])])]),t._v(" "),s("li",[t._v("把 ToNumber(lprim) 的结果赋给左数字 (lnum)。")]),t._v(" "),s("li",[t._v("把 ToNumber(rprim) 的结果赋给右数字 (rnum)。")]),t._v(" "),s("li",[t._v("返回左数字 (lnum) 和右数字 (rnum) 相加的数值。")])]),t._v(" "),s("p",[t._v("通俗地理解，V8 会提供了一个 ToPrimitve 方法，其作用是将 a 和 b 转换为原生数据类型，其转换流程如下：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("先检测该对象中是否存在 valueOf 方法，如果有并返回了原始类型，那么就使用该值进行强制类型转换；")])]),t._v(" "),s("li",[s("p",[t._v("如果 valueOf 没有返回原始类型，那么就使用 toString 方法的返回值；")])]),t._v(" "),s("li",[s("p",[t._v("如果 vauleOf 和 toString 两个方法都不返回基本类型值，便会触发一个 TypeError 的错误。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/03/02/9gCByA8PpFZ6YkJ.jpg",alt:"img"}})])])]),t._v(" "),s("p",[t._v("在执行加法操作的时候，V8 会通过 ToPrimitve 方法将对象类型转换为原生类型，最后就是两个原生类型相加，")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果其中一个值的类型是字符串时，则另一个值也需要强制转换为字符串，然后做字符串的连接运算。")])]),t._v(" "),s("li",[s("p",[t._v("在其他情况时，所有的值都会转换为数字类型值，然后做数字的相加。")])])]),t._v(" "),s("h2",{attrs:{id:"编译器和解释器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译器和解释器"}},[t._v("#")]),t._v(" 编译器和解释器")]),t._v(" "),s("p",[s("strong",[t._v("编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了")]),t._v("。比如 C/C++、GO 等都是编译型语言。")]),t._v(" "),s("p",[s("strong",[t._v("而由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行")]),t._v("。比如 Python、JavaScript 等都属于解释型语言。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/03/02/GaYuB9c24drM73g.png",alt:"image-20200914110124952"}})]),t._v(" "),s("h3",{attrs:{id:"v8-执行-javascript-代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v8-执行-javascript-代码"}},[t._v("#")]),t._v(" V8 执行 JavaScript 代码")]),t._v(" "),s("h4",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("预编译阶段 变量提升 并且赋值 undefined")])]),t._v(" "),s("li",[s("p",[t._v("编译阶段 生成两部分代码 "),s("strong",[t._v("执行上下文（Execution context）**和**可执行代码")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("执行阶段")])])]),t._v(" "),s("p",[s("strong",[t._v("其实在执行 JavaScript 代码之前，V8 就已经准备好了代码的运行时环境，这个环境包括了堆空间和栈空间、全局执行上下文、全局作用域、内置的内建函数、宿主环境提供的扩展函数和对象，还有消息循环系统。")])]),t._v(" "),s("h4",{attrs:{id:"生成抽象语法树-ast-和执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成抽象语法树-ast-和执行上下文"}},[t._v("#")]),t._v(" 生成抽象语法树（AST）和执行上下文")]),t._v(" "),s("p",[t._v("将源代码转换为"),s("strong",[t._v("抽象语法树")]),t._v("，并生成"),s("strong",[t._v("执行上下文")]),t._v("。 AST 看成代码的结构化的表示，编译器或者解释器后续的工作都需要依赖于 AST，而不是源代码。AST 应用中最著名的一个项目是 Babel。Babel 的工作原理就是先将 ES6 源码转换为 AST，然后再将 ES6 语法的 AST 转换为 ES5 语法的 AST，最后利用 ES5 的 AST 生成 JavaScript 源代码。")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("分词（tokenize），又称为词法分析")]),t._v("，其作用是将一行行的源码拆解成一个个 token。")])]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xiaopang"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// token : var 、 myName 、= 、 'xiaopang'")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("strong",[t._v("解析（parse），又称为语法分析")]),t._v("，其作用是将上一步生成的 token 数据，根据语法规则转为 AST。")])]),t._v(" "),s("h4",{attrs:{id:"生成字节码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成字节码"}},[t._v("#")]),t._v(" 生成字节码")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/03/02/nlpZNkxIDQzXgMs.png",alt:"image-20200914110829819"}})]),t._v(" "),s("p",[t._v("由于执行机器码的效率是非常高效的，所以早期 chorme 直接将 AST 转化成机器码进行保存。")]),t._v(" "),s("p",[t._v("但机器码占用内存过大，为了解决内存占用问题，V8 团队大幅重构了引擎架构，引入字节码。")]),t._v(" "),s("p",[s("strong",[t._v("字节码就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。")])]),t._v(" "),s("h4",{attrs:{id:"执行代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行代码"}},[t._v("#")]),t._v(" 执行代码")]),t._v(" "),s("p",[t._v("通常，如果有一段第一次执行的字节码，解释器 Ignition 会逐条解释执行。在执行字节码的过程中，如果发现有热点代码（HotSpot），比如一段代码被重复执行多次，这种就称为"),s("strong",[t._v("热点代码")]),t._v("，那么后台的编译器 TurboFan 就会把该段"),s("strong",[t._v("热点的字节码")]),t._v("编译为"),s("strong",[t._v("高效的机器码")]),t._v("，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大大提升了代码的执行效率。我们把这种技术称之为"),s("strong",[t._v("即时编译（JIT）")])]),t._v(" "),s("h2",{attrs:{id:"微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[t._v("#")]),t._v(" 微任务")]),t._v(" "),s("p",[t._v("MutationObserver 和 IntersectionObserver 两个性质应该差不多。我这里简称 ob。ob 是一个微任务，通过浏览器的 requestIdleCallback，在浏览器每一帧的空闲时间执行 ob 监听的回调，该监听是不影响主线程的，但是回调会阻塞主线程。当然有一个限制，如果 100ms 内主线程一直处于未空闲状态，那会强制触发 ob。")]),t._v(" "),s("h3",{attrs:{id:"协程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协程"}},[t._v("#")]),t._v(" 协程")]),t._v(" "),s("p",[t._v("协程是一种比线程更加轻量级的存在。你可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程。最重要的是，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。")]),t._v(" "),s("h3",{attrs:{id:"async-和-await-的优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async-和-await-的优化"}},[t._v("#")]),t._v(" Async 和 await 的优化")]),t._v(" "),s("p",[t._v("性能提升取决于以下三个因素：")]),t._v(" "),s("ul",[s("li",[t._v("TurboFan，新的优化编译器 🎉")]),t._v(" "),s("li",[t._v("Orinoco，新的垃圾回收器 🚛")]),t._v(" "),s("li",[t._v("一个 Node.js 8 的 bug 导致 await 跳过了一些微 tick（microticks） 🐛")])]),t._v(" "),s("h4",{attrs:{id:"bug-优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bug-优化"}},[t._v("#")]),t._v(" bug 优化")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after:await"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\np"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tick:a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tick:b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("通过判断 await 后的 是否是一个 Promise，如果是的话直接返回，可以节省一个 Promise，只封装必要的 promise。这个操作在值已经是 promose 的情况下可以省去一个额外的 promise 和两个微任务。")]),t._v(" "),s("h4",{attrs:{id:"去除了-throwaway"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#去除了-throwaway"}},[t._v("#")]),t._v(" 去除了 throwaway")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/03/02/E8yvK1mQD4z2nHJ.png",alt:"image-20200928100913316"}})]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzUzNjk5MTE1OQ==&mid=2247488356&idx=1&sn=2f17461b11dcf6a8365a2488d7e25945&chksm=faec97bccd9b1eaa108a03c3bfde45944a3b6b766154bc1f2b67706decfbcc7300b03eb54d46&mpshare=1&scene=1&srcid=09285usyMosTYJPNjtBC8aBC&sharer_sharetime=1601257327974&sharer_shareid=12302458a55e6884c1bb1c47ff44880d&key=a5121dd1fbb299a4574b60008a7892715083167693e8e0e07a0ea940e7a39419e895c9b1b0ebc446a53ca95dcaf5eab4b6a36628ad873096de1719747022b983bf12d8b2773a40f206a5271e184c1cd0cf893260303fd38da8e48d9e6ac7b8f577ddd2ec049a147d51b1de5beafec1a50a681a0466cebea7415e7d883c9fef58&ascene=1&uin=MTIwOTc2NTAyMQ%3D%3D&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=AXMYmDf2JEdNIm7d3TuwrRs%3D&pass_ticket=f%2BX7SDG7or8VWYKhna8jJ88M0v3Zv9Whtox6Rc4ZhhErghEtyOr5KNMpaF%2BaWmW3&wx_header=0",target:"_blank",rel:"noopener noreferrer"}},[t._v("「译」更快的 async 函数和 promises"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),s("p",[s("strong",[t._v("原始数据类型是存储在栈空间中的，引用类型的数据是存储在堆空间中的")]),t._v("。通过这种分配方式，我们解决了数据的内存分配的问题。")]),t._v(" "),s("p",[t._v("不过有些数据被使用之后，可能就不再需要了，我们把这种数据称为"),s("strong",[t._v("垃圾数据")]),t._v("。如果这些垃圾数据一直保存在内存中，那么内存会越用越多，所以我们需要"),s("strong",[t._v("对这些垃圾数据进行回收，以释放有限的内存空间")]),t._v("。")]),t._v(" "),s("p",[t._v("JS 有垃圾处理器，所以无需手动回收内存，而是由垃圾处理器自动处理。譬如对于那些执行完毕的函数，如果没有外部引用（被引用的话会形成闭包），则会回收。")]),t._v(" "),s("h3",{attrs:{id:"回收规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回收规则"}},[t._v("#")]),t._v(" 回收规则")]),t._v(" "),s("p",[t._v("常用的两种垃圾回收规则是："),s("strong",[t._v("标记清除")]),t._v(" 和 "),s("strong",[t._v("引用计数")])]),t._v(" "),s("p",[t._v("Javascript 引擎基础 GC 方案是：标记清除")]),t._v(" "),s("h4",{attrs:{id:"标记清除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标记清除"}},[t._v("#")]),t._v(" 标记清除")]),t._v(" "),s("p",[t._v("简单解释为：")]),t._v(" "),s("ol",[s("li",[t._v("遍历所有可访问的对象。")]),t._v(" "),s("li",[t._v("回收已不可访问的对象。")])]),t._v(" "),s("h4",{attrs:{id:"引用计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),s("p",[s("strong",[t._v("跟踪记录每个值被引用的次数，当一个值被引用时，次数"),s("code",[t._v("+1")]),t._v("，减持时"),s("code",[t._v("-1")]),t._v("，下次垃圾回收器会回收次数为"),s("code",[t._v("0")]),t._v("的值的内存（当然了，容易出循环引用的 bug）")])]),t._v(" "),s("h3",{attrs:{id:"调用栈中的数据回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用栈中的数据回收"}},[t._v("#")]),t._v(" 调用栈中的数据回收")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" 测试 "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" 测试一下 "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" 测试一下 "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("js 引擎 将 showName 函数 的执行上下文 压入 调用栈的同时，还有一个"),s("strong",[t._v("记录当前执行状态的指针（称为 ESP）")]),t._v("，指向调用栈中 showName 函数的执行上下文。")]),t._v(" "),s("p",[t._v("当函数执行完毕后，JavaScript 就会将指针下移，同时进行 showName 函数执行上下文的销毁")]),t._v(" "),s("p",[t._v("所以说，当一个函数执行结束之后，"),s("strong",[t._v("JavaScript 引擎会通过向下移动 ESP 来销毁该函数保存在栈中的执行上下文")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"堆中的数据回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆中的数据回收"}},[t._v("#")]),t._v(" 堆中的数据回收")]),t._v(" "),s("p",[t._v("当上面那段代码的 foo 函数执行结束之后，ESP 应该是指向全局执行上下文的，那这样的话，showName 函数和 foo 函数的执行上下文就处于无效状态了，不过保存在堆中的两个对象依然占用着空间，")]),t._v(" "),s("h4",{attrs:{id:"代际假说"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代际假说"}},[t._v("#")]),t._v(" "),s("strong",[t._v("代际假说")])]),t._v(" "),s("p",[s("strong",[t._v("代际假说")]),t._v("有以下两个特点：")]),t._v(" "),s("ul",[s("li",[t._v("第一个是大部分对象在内存中存在的时间很短，简单来说，就是很多对象一经分配内存，很快就变得不可访问；")]),t._v(" "),s("li",[t._v("第二个是不死的对象，会活得更久。")])]),t._v(" "),s("p",[t._v("在 V8 中会把堆分为"),s("strong",[t._v("新生代")]),t._v("和"),s("strong",[t._v("老生代")]),t._v("两个区域，"),s("strong",[t._v("新生代中存放的是生存时间短的对象，老生代中存放的生存时间久的对象")]),t._v("。")]),t._v(" "),s("p",[t._v("新生区通常只支持 1 ～ 8M 的容量，而老生区支持的容量就大很多了。对于这两块区域，V8 分别使用两个不同的垃圾回收器，以便更高效地实施垃圾回收。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("副垃圾回收器，主要负责新生代的垃圾回收。")])]),t._v(" "),s("li",[s("strong",[t._v("主垃圾回收器，主要负责老生代的垃圾回收。")])])]),t._v(" "),s("h4",{attrs:{id:"工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),s("p",[t._v("其实"),s("strong",[t._v("不论什么类型的垃圾回收器，它们都有一套共同的执行流程")]),t._v("。")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("标记")]),t._v("空间中活动对象和非活动对象。所谓活动对象就是还在使用的对象，非活动对象就是可以进行垃圾回收的对象。")]),t._v(" "),s("li",[s("strong",[t._v("回收")]),t._v("非活动对象所占据的内存。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象。")]),t._v(" "),s("li",[t._v("做"),s("strong",[t._v("内存整理")]),t._v("。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为"),s("strong",[t._v("内存碎片")]),t._v("。当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存的时候，就有可能出现内存不足的情况。所以最后一步需要整理这些内存碎片，但这步其实是可选的，因为有的垃圾回收器不会产生内存碎片，比如接下来我们要介绍的副垃圾回收器。")])]),t._v(" "),s("h4",{attrs:{id:"副垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#副垃圾回收器"}},[t._v("#")]),t._v(" 副垃圾回收器")]),t._v(" "),s("p",[t._v("副垃圾回收器主要负责新生区的垃圾回收。而通常情况下，大多数小的对象都会被分配到新生区，所以说这个区域虽然"),s("strong",[t._v("不大")]),t._v("，但是垃圾回收还是比较"),s("strong",[t._v("频繁")]),t._v("的。")]),t._v(" "),s("p",[t._v("新生代中用"),s("strong",[t._v("Scavenge 算法")]),t._v("来处理。所谓 Scavenge 算法，是把新生代空间对半划分为两个区域，一半是对象区域，一半是空闲区域。")]),t._v(" "),s("p",[s("strong",[t._v("新加入的对象")]),t._v("都会存放到"),s("strong",[t._v("对象区域")]),t._v("，当对象区域快被写满时，就需要执行一次垃圾清理操作。")]),t._v(" "),s("p",[t._v("在垃圾回收过程中，首先要对对象区域中的垃圾做标记；标记完成之后，就进入垃圾清理阶段，副垃圾回收器会把这些存活的对象复制到空闲区域中，同时它还会把这些对象有序地排列起来，所以这个复制过程，也就相当于完成了内存整理操作，复制后空闲区域就没有内存碎片了。")]),t._v(" "),s("p",[t._v("完成复制后，对象区域与空闲区域进行角色翻转，也就是原来的对象区域变成空闲区域，原来的空闲区域变成了对象区域。这样就完成了垃圾对象的回收操作，同时这种"),s("strong",[t._v("角色翻转的操作还能让新生代中的这两块区域无限重复使用下去")]),t._v("。")]),t._v(" "),s("p",[t._v("由于新生代中采用的 Scavenge 算法，所以每次执行清理操作时，都需要将存活的对象从对象区域复制到空闲区域。但复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以"),s("strong",[t._v("为了执行效率，一般新生区的空间会被设置得比较小")]),t._v("。")]),t._v(" "),s("p",[t._v("也正是因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了"),s("strong",[t._v("对象晋升策略")]),t._v("，也就是"),s("strong",[t._v("经过两次垃圾回收")]),t._v("依然还存活的对象，会被移动到老生区中")]),t._v(" "),s("h4",{attrs:{id:"主垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主垃圾回收器"}},[t._v("#")]),t._v(" 主垃圾回收器")]),t._v(" "),s("p",[t._v("主垃圾回收器主要负责老生区中的垃圾回收。除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。因此老生区中的对象有两个特点，一个是"),s("strong",[t._v("对象占用空间大")]),t._v("，另一个是"),s("strong",[t._v("对象存活时间长")]),t._v("。")]),t._v(" "),s("p",[t._v("主垃圾回收器 考虑晋升的都是大对象，复制会花费时间多，所以采用**标记 - 清除（Mark-Sweep）**的算法进行垃圾回收。")]),t._v(" "),s("ol",[s("li",[t._v("标记阶段从一组根元素开始，递归遍历这组根元素，在这个遍历过程中，能到达的元素称为"),s("strong",[t._v("活动对象")]),t._v("，没有到达的元素就可以判断为"),s("strong",[t._v("垃圾数据")]),t._v("。")]),t._v(" "),s("li",[t._v("垃圾清除阶段")]),t._v(" "),s("li",[s("strong",[t._v("标记 - 整理（Mark-Compact）")]),t._v("：因为清除算法会产生大量不连续的内存碎片，所以整理算法在标记后不直接清除，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。")])]),t._v(" "),s("h3",{attrs:{id:"优化策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化策略"}},[t._v("#")]),t._v(" "),s("strong",[t._v("优化策略")])]),t._v(" "),s("h4",{attrs:{id:"并行回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行回收"}},[t._v("#")]),t._v(" 并行回收")]),t._v(" "),s("p",[t._v("所谓并行回收，是指垃圾回收器在主线程上执行的过程中，还会开启多个协助线程，同时执行同样的回收工作，其工作模式如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/03/02/EWIV4hRkatxwATn.jpg",alt:"img"}})]),t._v(" "),s("h4",{attrs:{id:"增量回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#增量回收"}},[t._v("#")]),t._v(" 增量回收")]),t._v(" "),s("p",[t._v("javascript 的 GC 策略无法避免一个问题： "),s("strong",[t._v("GC 时，停止响应其他操作")]),t._v("。这种行为叫做"),s("strong",[t._v("全停顿（Stop-The-World）")]),t._v("。")]),t._v(" "),s("p",[t._v("为了降低老生代的垃圾回收而造成的卡顿，V8 将标记过程分为一个个的子标记过程，同时让垃圾回收标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成，我们把这个算法称为"),s("strong",[t._v("增量标记（Incremental Marking）算法")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/03/02/EqRYruTZxG81Wgn.png",alt:"image-20200911171612153"}})]),t._v(" "),s("p",[t._v("使用增量标记算法，可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，这样当执行上述动画效果时，就不会让用户因为垃圾回收任务而感受到页面的卡顿了。")]),t._v(" "),s("p",[t._v("这有和 React 通过 Fiber 更新策略有着异曲同工之妙。")]),t._v(" "),s("h5",{attrs:{id:"如何实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现"}},[t._v("#")]),t._v(" 如何实现")]),t._v(" "),s("p",[t._v("增量标记的算法，比全停顿的算法要稍微复杂，这主要是因为增量回收是并发的（concurrent），要实现增量执行，需要满足两点要求")]),t._v(" "),s("ol",[s("li",[t._v("垃圾回收可以被随时暂停和重启，暂停时需要保存当时的扫描结果，等下一波垃圾回收来了之后，才能继续启动。")]),t._v(" "),s("li",[t._v("在暂停期间，被标记好的垃圾数据如果被 JavaScript 代码修改了，那么垃圾回收器需要能够正确地处理。")])]),t._v(" "),s("p",[t._v("在没有采用增量算法之前，V8 使用黑色和白色来标记数据。在执行一次完整的垃圾回收之前，垃圾回收器会将所有的数据设置为白色，用来表示这些数据还没有被标记，然后垃圾回收器在会从 GC Roots 出发，将所有能访问到的数据标记为黑色。遍历结束之后，被标记为"),s("strong",[t._v("黑色的数据就是活动数据")]),t._v("，那些"),s("strong",[t._v("白色数据就是垃圾数据")])]),t._v(" "),s("p",[t._v("如果内存中的数据只有两种状态，非黑即白，那么当你暂停了当前的垃圾回收器之后，再次恢复垃圾回收器，那么垃圾回收器就不知道从哪个位置继续开始执行了。")]),t._v(" "),s("p",[t._v("为了解决这个问题，V8 采用了三色标记法，除了黑色和白色，还额外引入了灰色：")]),t._v(" "),s("ul",[s("li",[t._v("黑色表示这个节点被 GC Root 引用到了，而且该节点的子节点都已经标记完成了 ;")]),t._v(" "),s("li",[t._v("灰色表示这个节点被 GC Root 引用到，但子节点还没被垃圾回收器标记处理，也表明目前正在处理这个节点；")]),t._v(" "),s("li",[t._v("白色表示这个节点没有被访问到，如果在本轮遍历结束时还是白色，那么这块数据就会被收回。")])]),t._v(" "),s("h4",{attrs:{id:"并发回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发回收机制"}},[t._v("#")]),t._v(" 并发回收机制")]),t._v(" "),s("p",[t._v("所谓并发回收，是指"),s("strong",[t._v("主线程在执行 JavaScript 的过程中，辅助线程能够在后台完成执行垃圾回收的操作")]),t._v("。并发标记的流程大致如下图所示："),s("img",{attrs:{src:"https://i.loli.net/2021/03/02/JZ1vhami72buLQH.jpg",alt:"img"}})]),t._v(" "),s("p",[t._v("并发回收是这三种技术中最难的一种，这主要由以下两个原因导致的：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("第一，当主线程执行 JavaScript 时，堆中的内容随时都有可能发生变化，从而使得辅助线程之前做的工作完全无效；")])]),t._v(" "),s("li",[s("p",[t._v("第二，主线程和辅助线程极有可能在同一时间去更改同一个对象，这就需要额外实现读写锁的一些功能了。")])])]),t._v(" "),s("p",[t._v("不过，这三种技术在实际使用中，并不是单独的存在，通常会将其融合在一起使用，V8 的主垃圾回收器就融合了这三种机制，来实现垃圾回收，那它具体是怎么工作的呢？你可以先看下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/04/09/cWSqoYteQiF2Of6.png",alt:"image-20210409152414083"}})]),t._v(" "),s("p",[t._v("可以看出来，主垃圾回收器同时采用了这三种策略：")]),t._v(" "),s("ul",[s("li",[t._v("首先主垃圾回收器主要使用并发标记，我们可以看到，在主线程执行 JavaScript，辅助线程就开始执行标记操作了，所以说标记是在辅助线程中完成的。")]),t._v(" "),s("li",[t._v("标记完成之后，再执行并行清理操作。主线程在执行清理操作时，多个辅助线程也在执行清理操作。")]),t._v(" "),s("li",[t._v("另外，主垃圾回收器还采用了增量标记的方式，清理的任务会穿插在各种 JavaScript 任务之间执行。")])]),t._v(" "),s("h3",{attrs:{id:"合理利用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合理利用"}},[t._v("#")]),t._v(" 合理利用")]),t._v(" "),s("h4",{attrs:{id:"合理应用闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合理应用闭包"}},[t._v("#")]),t._v(" 合理应用闭包")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp_object "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  temp_object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  temp_object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  temp_object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   *   使用temp_object\n   */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" closure "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp_object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp_object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误：闭包引用的整个temp 对象")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("closure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//正确：闭包引用的仅仅是一个 closure 的变量")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"js-引用-dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-引用-dom"}},[t._v("#")]),t._v(" JS 引用 DOM")]),t._v(" "),s("p",[s("strong",[t._v("只有同时满足 DOM 树和 JavaScript 代码都不引用某个 DOM 节点，该节点才会被作为垃圾进行回收。")])]),t._v(" "),s("h4",{attrs:{id:"内存膨胀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存膨胀"}},[t._v("#")]),t._v(" 内存膨胀")]),t._v(" "),s("p",[t._v("额外使用过多的内存有可能是没有充分地利用好缓存，也有可能加载了一些不必要的资源。通常表现为内存在某一段时间内快速增长，然后达到一个平稳的峰值继续运行。")]),t._v(" "),s("p",[t._v("比如"),s("strong",[t._v("一次性加载了大量的资源")]),t._v("，内存会快速达到一个峰值。")]),t._v(" "),s("p",[t._v("要避免内存膨胀，我们需要合理规划项目，充分利用缓存等技术来减轻项目中不必要的内存占用。")]),t._v(" "),s("h4",{attrs:{id:"频繁的垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#频繁的垃圾回收"}},[t._v("#")]),t._v(" 频繁的垃圾回收")]),t._v(" "),s("p",[t._v("那就是频繁使用大的临时变量，导致了新生代空间很快被装满，从而频繁触发垃圾回收。频繁的垃圾回收操作会让你感觉到页面卡顿。")]),t._v(" "),s("p",[t._v("为了解决频繁的垃圾回收的问题，你可以考虑将这些临时变量设置为全局变量。")])])}),[],!1,null,null,null);a.default=n.exports}}]);