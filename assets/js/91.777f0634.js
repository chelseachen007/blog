(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{462:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vue-专题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-专题"}},[t._v("#")]),t._v(" Vue 专题")]),t._v(" "),s("h2",{attrs:{id:"v-show-与-v-if-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-show-与-v-if-区别"}},[t._v("#")]),t._v(" v-show 与 v-if 区别")]),t._v(" "),s("ol",[s("li",[t._v("v-show 只是 display：none 和 display：block 的切换。而 v-if 是将 DOM 移除，并重新渲染")]),t._v(" "),s("li",[t._v("v-show 适合 频繁切换的模块，一次渲染则使用 v-if")]),t._v(" "),s("li",[t._v("使用 v-if 时可以默认设 false 让其不渲染，等待需要时再进行 nextTick 异步渲染")])]),t._v(" "),s("h2",{attrs:{id:"计算属性和-watch-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算属性和-watch-的区别"}},[t._v("#")]),t._v(" 计算属性和 watch 的区别")]),t._v(" "),s("p",[t._v("计算属性其实是一个惰性的 Watcher，他在内部维护的一个 "),s("code",[t._v("diary")]),t._v(" 根据 产生的新值是否有变化来判断是否要通知 "),s("code",[t._v("notify")]),t._v(" 更新视图,是一种为了减少不必要渲染的优化措施。")]),t._v(" "),s("p",[s("code",[t._v("computed")]),t._v(" 可以监听多个值，动态返回结果，"),s("code",[t._v("watch")]),t._v(" 是一个过程，在值变化的时候出一个回调并做一些事。所以在需要一个动态值时，就使用 "),s("code",[t._v("computed")]),t._v("，需要知道值 的变化后执行逻辑使用 "),s("code",[t._v("watch")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"computed-是一个对象时-它有哪些选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed-是一个对象时-它有哪些选项"}},[t._v("#")]),t._v(" computed 是一个对象时，它有哪些选项？")]),t._v(" "),s("p",[t._v("get()和 set()")]),t._v(" "),s("h4",{attrs:{id:"computed-和-methods-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed-和-methods-有什么区别"}},[t._v("#")]),t._v(" computed 和 methods 有什么区别？")]),t._v(" "),s("p",[t._v("computed 不能接受参数，具有缓存，可以监听动态值")]),t._v(" "),s("h4",{attrs:{id:"computed-是否能依赖其它组件的数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed-是否能依赖其它组件的数据"}},[t._v("#")]),t._v(" computed 是否能依赖其它组件的数据？")]),t._v(" "),s("p",[t._v("computed 可以依赖其它 computed，甚至是其它组件的 data。")]),t._v(" "),s("h4",{attrs:{id:"watch-是一个对象时-它有哪些选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watch-是一个对象时-它有哪些选项"}},[t._v("#")]),t._v(" watch 是一个对象时，它有哪些选项？")]),t._v(" "),s("ul",[s("li",[t._v("deep 是否深度")]),t._v(" "),s("li",[t._v("handler 执行的函数")]),t._v(" "),s("li",[t._v("immediate 是否立即执行")])]),t._v(" "),s("h2",{attrs:{id:"组件中-data-为什么是函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件中-data-为什么是函数"}},[t._v("#")]),t._v(" 组件中 data 为什么是函数")]),t._v(" "),s("p",[t._v("组件是用来复用的，注册组件本质上是创造了一个组件构造器的引用。使用对象的话，会公用一个引用地址，造成一个组件值之间的相互影响，这明显不是我们想要看到的。所以使用函数每次都返回一个新的对象。")]),t._v(" "),s("h2",{attrs:{id:"自定义组件的-v-model-是怎样实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义组件的-v-model-是怎样实现的"}},[t._v("#")]),t._v(" 自定义组件的 v-model 是怎样实现的")]),t._v(" "),s("p",[t._v("组件的 v-model 是 Vue 为我们写的一种语法糖，他为我们传入一个值为"),s("code",[t._v("value")]),t._v("的"),s("code",[t._v("props")]),t._v("和绑定了一个"),s("code",[t._v("input")]),t._v("的"),s("code",[t._v("emit")]),t._v("事件，将值传递上来赋值。在制作一些特殊组件值需要重新命名时，可以使用"),s("code",[t._v("model")]),t._v("进行"),s("code",[t._v("value")]),t._v("和"),s("code",[t._v("input")]),t._v(" 的改名。另外 Vue 在 2.+的时候推出了一个修饰.sync 支持多个 v-model 值绑定，只需要将事件变成"),s("code",[t._v("‘updata：value’")])]),t._v(" "),s("h2",{attrs:{id:"mixins-原理知道吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mixins-原理知道吗"}},[t._v("#")]),t._v(" mixins 原理知道吗？")]),t._v(" "),s("p",[s("code",[t._v("mixins")]),t._v("在 Vue 内部是将 mixins 和组件的"),s("code",[t._v("options")]),t._v("传入一个"),s("code",[t._v("margeOptions")]),t._v("函数，这个函数我觉得"),s("code",[t._v("assign")]),t._v("有点像，前者是一个默认属性，当组件有同名属性时，会使用后者覆盖前者，数据对象"),s("code",[t._v("data")]),t._v("会进行递归合并，"),s("code",[t._v("computed")]),t._v("等会进行键值对比较，优先组件 Key 值。")]),t._v(" "),s("p",[t._v("优点：逻辑相同的代码都可以抽离出来，放入 mixins 实现复用")]),t._v(" "),s("p",[t._v("缺点：因为是根据 Key 进行覆盖，容易出现命名空间混乱导致不想要发生的覆盖")]),t._v(" "),s("h2",{attrs:{id:"vue3-和-vue2-双向绑定的区别-优化点在哪-用-proxy-为什么是一种优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue3-和-vue2-双向绑定的区别-优化点在哪-用-proxy-为什么是一种优化"}},[t._v("#")]),t._v(" "),s("strong",[t._v("vue3 和 vue2 双向绑定的区别,优化点在哪,用 proxy 为什么是一种优化")])]),t._v(" "),s("p",[t._v("Vue3 采用了 proxy 进行数据拦截，这是一个 ES6 自带的一个 API，支持拦截整个对象几乎所有操作，不需要像 Vue2 一样对每个 Key 进行循环递归生成 Watcher。")]),t._v(" "),s("p",[t._v("Vue2 在收集依赖的时候每个 Key 都有一个依赖收集器，Vue 使用 weakMap 来收集依赖，减少依赖收集的开销")]),t._v(" "),s("h2",{attrs:{id:"你知道-vue-中-key-的作用和工作原理吗-说说你对它的理解。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你知道-vue-中-key-的作用和工作原理吗-说说你对它的理解。"}},[t._v("#")]),t._v(" 你知道 vue 中 key 的作用和工作原理吗？说说你对它的理解。")]),t._v(" "),s("ol",[s("li",[t._v("key 的作用是为了高效的更新虚拟 DOM，其原理是 Vue 在进行 patch 过程中可通过 key 精准的判断两个节点是否是同一个，从而避免频繁的更新不同元素，使得整个 patch 过程更加高效，减少 DOM 操作。")]),t._v(" "),s("li",[t._v("另外，若不设置 key 还可能在列表更新时引发一些隐蔽的 bug")])]),t._v(" "),s("h2",{attrs:{id:"你怎么理解-vue-中的-diff-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你怎么理解-vue-中的-diff-算法"}},[t._v("#")]),t._v(" 你怎么理解 vue 中的 diff 算法？")]),t._v(" "),s("ol",[s("li",[t._v("DOM 操作是奢侈的，diff 算法通过比对新旧 Vnode 树，将变化的地方更新到新 DOM 上，另外将时间复杂度降低到 O(n)")]),t._v(" "),s("li",[t._v("Vue2.x 为了降低 Weather 粒度，每个组件只有一个 Weather，引入 diff 才能精准找到变化的地方")]),t._v(" "),s("li",[t._v("diff 过程整体遵循深度优先、同层比较的策略；两个节点之间比较会根据它们是否拥有子节点或者文 本节点做不同操作；比较两组子节点是算法的重点，首先假设头尾节点可能相同做 4 次比对尝试，如果 没有找到相同节点才按照通用方式遍历查找，查找结束再按情况处理剩下的节点；借助 key 通常可以非 常精确找到相同节点，因此整个 patch 过程非常高效。")])]),t._v(" "),s("h2",{attrs:{id:"谈一谈对-vue-组件化的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈一谈对-vue-组件化的理解"}},[t._v("#")]),t._v(" 谈一谈对 vue 组件化的理解")]),t._v(" "),s("ol",[s("li",[t._v("组件是独立和可复用的代码组织单元。组件系统是 Vue 核心特性之一，它使开发者使用小型、独立和通常可复用的组件构建大型应用；")]),t._v(" "),s("li",[t._v("组件化开发能大幅提高应用开发效率、测试性、复用性等；")]),t._v(" "),s("li",[t._v("vue 中常见组件化技术有：属性 prop，自定义事件，插槽等，它们主要用于组件通信、扩展等；")]),t._v(" "),s("li",[t._v("合理的划分组件，有助于提升应用性能；")]),t._v(" "),s("li",[t._v("组件应该是高内聚、低耦合的；")]),t._v(" "),s("li",[t._v("遵循单向数据流的原则。")])]),t._v(" "),s("h2",{attrs:{id:"mvc、mvp-和-mvvm-的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mvc、mvp-和-mvvm-的理解"}},[t._v("#")]),t._v(" MVC、MVP 和 MVVM 的理解")]),t._v(" "),s("ul",[s("li",[t._v("这三者都是框架模式，它们设计的目标都是为了解决 Model 和 View 的耦合问题。")]),t._v(" "),s("li",[t._v("MVC 模式出现较早主要应用在后端，如 Spring MVC、ASP.NET MVC 等，在前端领域的早期也有应 用，如 Backbone.js。它的优点是分层清晰，缺点是数据流混乱，灵活性带来的维护性问题。")]),t._v(" "),s("li",[t._v("MVP 模式在是 MVC 的进化形式，Presenter 作为中间层负责 MV 通信，解决了两者耦合问题，但 P 层 过于臃肿会导致维护问题。")]),t._v(" "),s("li",[t._v("MVVM 模式在前端领域有广泛应用，它不仅解决 MV 耦合问题，还同时解决了维护两者映射关系的 大量繁杂代码和 DOM 操作代码，在提高开发效率、可读性同时还保持了优越的性能表现。")])]),t._v(" "),s("h2",{attrs:{id:"vue-性能优化的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-性能优化的方法"}},[t._v("#")]),t._v(" vue 性能优化的方法")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("使用路由懒加载")])]),t._v(" "),s("li",[s("p",[t._v("keep-alive 缓存页面")])]),t._v(" "),s("li",[s("p",[t._v("长列表性能优化")])])]),t._v(" "),s("ul",[s("li",[t._v("虚拟列表")]),t._v(" "),s("li",[t._v("不展示，可以通过 Object.freeze 冻结数据")])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("图片懒加载")]),t._v(" "),s("li",[t._v("第三方库按需引入")])]),t._v(" "),s("h2",{attrs:{id:"vue3-新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue3-新特性"}},[t._v("#")]),t._v(" vue3 新特性")]),t._v(" "),s("ol",[s("li",[t._v("优化 diff 算法，跳过一些静态节点和静态树")]),t._v(" "),s("li",[t._v("引入 Composition API")]),t._v(" "),s("li",[t._v("hooks 写法使逻辑更加内聚")]),t._v(" "),s("li",[t._v("通过 Tree-shark 进行优化包体积")]),t._v(" "),s("li",[t._v("使用 proxy 实现双向绑定")])]),t._v(" "),s("h2",{attrs:{id:"vuex-使用及理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vuex-使用及理解"}},[t._v("#")]),t._v(" vuex 使用及理解")]),t._v(" "),s("h2",{attrs:{id:"vue-中组件之间的通信方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-中组件之间的通信方式"}},[t._v("#")]),t._v(" vue 中组件之间的通信方式？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("跨组件通信")]),t._v(" "),s("ul",[s("li",[t._v("Provide 和 inject // 不是响应式的，")]),t._v(" "),s("li",[t._v("$attrs/$listeners")])])]),t._v(" "),s("li",[s("p",[t._v("父子通信")]),t._v(" "),s("ul",[s("li",[t._v("Prop 和 $emit")]),t._v(" "),s("li",[t._v("$refs")]),t._v(" "),s("li",[t._v("$parent 和$children")])])]),t._v(" "),s("li",[s("p",[t._v("兄弟通信")]),t._v(" "),s("ul",[s("li",[t._v("Vuex")]),t._v(" "),s("li",[t._v("VueBus")])])]),t._v(" "),s("li",[s("p",[t._v("组件库通信方式")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("自行实现 dispatch 和 broadcast 方法")]),t._v(" "),s("p",[t._v("前者用于向上级派发事件，只要是它的父级（一级或多级以上），都可以在组件内通过 $on （或 events，2.x 已废弃）监听到，后者相反，是由上级向下级广播事件的。")])]),t._v(" "),s("li",[s("p",[t._v("向上/下找到所有/最近的指定组件——findComponentsUpward 通过 Component Name 去寻找")])])])])]),t._v(" "),s("h2",{attrs:{id:"vue-router-中如何保护指定路由的安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-中如何保护指定路由的安全"}},[t._v("#")]),t._v(" vue-router 中如何保护指定路由的安全？")]),t._v(" "),s("h2",{attrs:{id:"你知道-nexttick-吗-它是干什么的-实现原理是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你知道-nexttick-吗-它是干什么的-实现原理是什么"}},[t._v("#")]),t._v(" 你知道 nextTick 吗？它是干什么的？实现原理是什么？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("vue 如何检测到 DOM 更新完毕呢？\n能监听到 DOM 改动的 API：MutationObserver")])]),t._v(" "),s("li",[s("p",[t._v("理解 MutationObserver\nMutationObserver 是 HTML5 新增的属性，用于监听 DOM 修改事件，能够监听到节点的属性、文本内容、子节点等的改动，是一个功能强大的利器。")])])]),t._v(" "),s("p",[t._v("Vue 的 nextTick 采用的是降级策略， 优先使用的是微任务的 Promise 和 MutationObserver 兼容性不支持则降级为宏任务的 setImmediate、MessageChannel、setTimeout.")]),t._v(" "),s("h2",{attrs:{id:"谈一谈你对-vue-响应式原理的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈一谈你对-vue-响应式原理的理解"}},[t._v("#")]),t._v(" 谈一谈你对 vue 响应式原理的理解？")]),t._v(" "),s("ol",[s("li",[t._v("由于 Vue 执行一个组件的 "),s("code",[t._v("render")]),t._v(" 函数是由 "),s("code",[t._v("Watcher")]),t._v(" 去代理执行的，"),s("code",[t._v("Watcher")]),t._v(" 在执行前会把 "),s("code",[t._v("Watcher")]),t._v(" 自身先赋值给 "),s("code",[t._v("Dep.target")]),t._v(" 这个全局变量，等待响应式属性去收集它")]),t._v(" "),s("li",[t._v("这样在哪个组件执行 "),s("code",[t._v("render")]),t._v(" 函数时访问了响应式属性，响应式属性就会精确的收集到当前全局存在的 "),s("code",[t._v("Dep.target")]),t._v(" 作为自身的依赖")]),t._v(" "),s("li",[t._v("在响应式属性发生更新时通知 "),s("code",[t._v("Watcher")]),t._v(" 去重新调用 "),s("code",[t._v("vm._update(vm._render())")]),t._v(" 进行组件的视图更新")])]),t._v(" "),s("h2",{attrs:{id:"手写一个简单的-diff-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手写一个简单的-diff-算法"}},[t._v("#")]),t._v(" 手写一个简单的 diff 算法")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("oldNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oldChildren "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newChildren "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 老的有子节点，新的没有就移除")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("newChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// remove oldChildren")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 老的没有子节点，新的有 就 清空老节点并将新节点加入到DOM下")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("newChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// oldChildren =null")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Dom.append(newChildren)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 都没有 就只做文本的替换")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("oldChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("newChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 替换文本")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("someNode")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优先判断 key 是否相同")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异步组件 判断 asyncFactory  是否相同")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步组件 判断input,data,isComment  是否相同")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("oldNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newStart\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldStart\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldEnd\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newEnd\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStart "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEnd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStart "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEnd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// someNode 判断后 都进入 patchVnode")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新头和旧头")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newStart "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" oldStart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            newStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n            oldStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//旧尾和新尾")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEnd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEnd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            oldEnd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n            newEnd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//旧头和新尾")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStart "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEnd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            oldStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n            newEnd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新头和旧尾")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newStart "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" oldEnd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            newStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n            oldEnd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//都找不到 就遍历oldNode 生成一个 {key:index} 的Map")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldKeyToIdx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldKeyToIdx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newStart"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// move 这个节点到 oldStart 之前 然后继续遍历")]),t._v("\n            newStart"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果找不到，或者 key 相同 但内容不相同")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//createElm创建一个新的DOM节点。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//循环完")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的比老的长 addVnodes 多出来的节点")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 老的比新的长 removeVnodes 多出来的节点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);