(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{543:function(t,a,r){"use strict";r.r(a);var s=r(42),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"从中序与后序遍历序列构造二叉树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#从中序与后序遍历序列构造二叉树"}},[t._v("#")]),t._v(" 从中序与后序遍历序列构造二叉树")]),t._v(" "),r("h2",{attrs:{id:"题目描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),r("blockquote",[r("p",[t._v("根据一棵树的中序遍历与后序遍历构造二叉树。")]),t._v(" "),r("p",[t._v("注意:\n你可以假设树中没有重复的元素。")]),t._v(" "),r("p",[t._v("例如，给出")]),t._v(" "),r("p",[t._v("中序遍历 inorder = [9,3,15,20,7]\n后序遍历 postorder = [9,15,7,20,3]\n返回如下的二叉树：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("3\n")])])]),r("p",[t._v("/ "),r("br"),t._v("\n9 20\n/ "),r("br"),t._v("\n15 7")]),t._v(" "),r("p",[t._v("来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])]),t._v(" "),r("h2",{attrs:{id:"我的回答"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#我的回答"}},[t._v("#")]),t._v(" 我的回答")]),t._v(" "),r("h3",{attrs:{id:"解法一"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解法一"}},[t._v("#")]),t._v(" 解法一")]),t._v(" "),r("h4",{attrs:{id:"时空复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#时空复杂度"}},[t._v("#")]),t._v(" 时空复杂度")]),t._v(" "),r("p",[t._v("时间复杂度：O(n)")]),t._v(" "),r("p",[t._v("空间复杂度: O(1)")]),t._v(" "),r("div",{staticClass:"language-JavaScript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[t._v("\n")])])]),r("h2",{attrs:{id:"参考回答"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考回答"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),r("ul",[r("li")])])}),[],!1,null,null,null);a.default=e.exports}}]);