(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{484:function(t,a,n){"use strict";n.r(a);var e=n(42),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"【day-18】二叉树中的最大路径和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#【day-18】二叉树中的最大路径和"}},[t._v("#")]),t._v(" 【Day 18】二叉树中的最大路径和")]),t._v(" "),n("h2",{attrs:{id:"题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),n("div",{staticClass:"language-markdown extra-class"},[n("pre",{pre:!0,attrs:{class:"language-markdown"}},[n("code",[t._v("给定一个非空二叉树，返回其最大路径和。\n\n本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。\n\n示例 1:\n\n输入: [1,2,3]\n\n"),n("span",{pre:!0,attrs:{class:"token code keyword"}},[t._v("       1\n      / \\\n     2   3")]),t._v("\n\n输出: 6\n示例 2:\n\n输入: [-10,9,20,null,null,15,7]\n\n-10\n/ \\\n 9 20\n/ \\\n 15 7\n\n输出: 42\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/binary-tree-maximum-path-sum\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n")])])]),n("h2",{attrs:{id:"我的回答"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#我的回答"}},[t._v("#")]),t._v(" 我的回答")]),t._v(" "),n("p",[t._v("https://github.com/leetcode-pp/91alg-1/issues/39#issuecomment-647955958")]),t._v(" "),n("h3",{attrs:{id:"解法一"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解法一"}},[t._v("#")]),t._v(" 解法一")]),t._v(" "),n("p",[t._v("这题自己没想出来 ，先看懂了题解 过几天回头再看看啊")]),t._v(" "),n("h4",{attrs:{id:"时间复杂度-o-n"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度-o-n"}},[t._v("#")]),t._v(" 时间复杂度 O(n)")]),t._v(" "),n("h4",{attrs:{id:"空间复杂度-o-n-n-为树的高度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度-o-n-n-为树的高度"}},[t._v("#")]),t._v(" 空间复杂度 O(n) n 为树的高度")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("maxPathSum")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" left "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" right "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" left "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h2",{attrs:{id:"参考回答"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考回答"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),n("h3",{attrs:{id:"题目地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目地址"}},[t._v("#")]),t._v(" 题目地址")]),t._v(" "),n("p",[t._v("https://leetcode.com/problems/binary-tree-maximum-path-sum/description/")]),t._v(" "),n("h3",{attrs:{id:"题目描述-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述-2"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Given a non-empty binary tree, find the maximum path sum.\n\nFor this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\n\nExample 1:\n\nInput: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\nExample 2:\n\nInput: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\nOutput: 42\n")])])]),n("h3",{attrs:{id:"前置知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),n("ul",[n("li",[t._v("递归")])]),t._v(" "),n("h3",{attrs:{id:"思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),n("p",[t._v("这道题目的 path 让我误解了，然后浪费了很多时间来解这道题 我觉得 leetcode 给的 demo 太少了，不足以让我理解 path 的概念 因此我这里自己画了一个图，来补充一下，帮助大家理解 path 的概念，不要像我一样理解错啦。")]),t._v(" "),n("p",[t._v("首先是官网给的两个例子：")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/azl397985856/leetcode/blob/b1e1f5f55bc4ad3004cfafb6415a3e9de35c131a/assets/problems/124.binary-tree-maximum-path-sum.jpg",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://github.com/azl397985856/leetcode/raw/b1e1f5f55bc4ad3004cfafb6415a3e9de35c131a/assets/problems/124.binary-tree-maximum-path-sum.jpg",alt:"124.binary-tree-maximum-path-sum"}}),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("接着是我自己画的一个例子：")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/azl397985856/leetcode/blob/b1e1f5f55bc4ad3004cfafb6415a3e9de35c131a/assets/problems/124.binary-tree-maximum-path-sum-1.jpg",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://github.com/azl397985856/leetcode/raw/b1e1f5f55bc4ad3004cfafb6415a3e9de35c131a/assets/problems/124.binary-tree-maximum-path-sum-1.jpg",alt:"124.binary-tree-maximum-path-sum"}}),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("大家可以结合上面的 demo 来继续理解一下 path， 除非你理解了 path，否则不要往下看。")]),t._v(" "),n("p",[t._v("树的题目，基本都是考察递归思想的。因此我们需要思考如何去定义我们的递归函数， 在这里我定义了一个递归函数，它的功能是，"),n("code",[t._v("返回以当前节点为根节点的MathPath")]),t._v(" 但是有两个条件:")]),t._v(" "),n("ol",[n("li",[t._v("第一是跟节点必须选择")]),t._v(" "),n("li",[t._v("第二是左右子树只能选择一个")])]),t._v(" "),n("p",[t._v("为什么要有这两个条件?")]),t._v(" "),n("p",[t._v("我的想法是原问题可以转化为：")]),t._v(" "),n("p",[t._v("以每一个节点为根节点，我们分别求出 max path，最后计算最大值,因此第一个条件需要满足.")]),t._v(" "),n("p",[t._v("对于第二个，由于递归函数子节点的返回值会被父节点使用，因此我们如果两个孩子都选择了 就不符合 max path 的定义了，这也是我没有理解题意，绕了很大弯子的原因。")]),t._v(" "),n("p",[t._v("因此我的做法就是不断调用递归函数，然后在调用过程中不断计算和更新 max，最后在主函数中将 max 返回即可。")]),t._v(" "),n("h3",{attrs:{id:"关键点解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关键点解析"}},[t._v("#")]),t._v(" 关键点解析")]),t._v(" "),n("ul",[n("li",[t._v("递归")]),t._v(" "),n("li",[t._v("理解题目中的 path 定义")])]),t._v(" "),n("h3",{attrs:{id:"代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),n("p",[t._v("代码支持：JavaScript，Java，Python")]),t._v(" "),n("ul",[n("li",[t._v("JavaScript")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/*\n * @lc app=leetcode id=124 lang=javascript\n *\n * [124] Binary Tree Maximum Path Sum\n */\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\nfunction helper(node, payload) {\n  if (node === null) return 0;\n\n  const l = helper(node.left, payload);\n  const r = helper(node.right, payload);\n\n  payload.max = Math.max(\n    node.val + Math.max(0, l) + Math.max(0, r),\n    payload.max\n  );\n\n  return node.val + Math.max(l, r, 0);\n}\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxPathSum = function(root) {\n  if (root === null) return 0;\n  const payload = {\n    max: root.val\n  };\n  helper(root, payload);\n  return payload.max;\n};\n")])])]),n("ul",[n("li",[t._v("Java")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n  int ans;\n  public int maxPathSum(TreeNode root) {\n    ans = Integer.MIN_VALUE;\n    helper(root);   // recursion\n    return ans;\n  }\n\n  public int helper(TreeNode root) {\n    if (root == null) return 0;\n    int leftMax = Math.max(0, helper(root.left));     // find the max sub-path sum in left sub-tree\n    int rightMax = Math.max(0, helper(root.right));   // find the max sub-path sum in right sub-tree\n    ans = Math.max(ans, leftMax+rightMax+root.val);   // find the max path sum at current node\n    return max(leftMax, rightMax) + root.val;         // according to the definition of path, the return value of current node can only be that the sum of current node value plus either left or right max path sum.\n  }\n}\n")])])]),n("ul",[n("li",[t._v("Python")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Solution:\n    ans = float('-inf')\n    def maxPathSum(self, root: TreeNode) -> int:\n        def helper(node):\n            if not node: return 0\n            l = helper(node.left)\n            r = helper(node.right)\n            self.ans = max(self.ans, max(l,0) + max(r, 0) + node.val)\n            return max(l, r, 0) + node.val\n        helper(root)\n        return self.ans\n")])])]),n("h3",{attrs:{id:"相关题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关题目"}},[t._v("#")]),t._v(" 相关题目")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/azl397985856/leetcode/blob/b1e1f5f55bc4ad3004cfafb6415a3e9de35c131a/problems/113.path-sum-ii.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("113.path-sum-ii"),n("OutboundLink")],1)])]),t._v(" "),n("h3",{attrs:{id:"扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),n("p",[t._v("实际上这道题，当遍历到某一个节点的时候，我们需要子节点的信息，然后同时结合自身的 val 来决定要不要选取左右子树。 因此这个过程本质上就是"),n("code",[t._v("后序遍历")]),t._v("。")])])}),[],!1,null,null,null);a.default=s.exports}}]);