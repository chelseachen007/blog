(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{417:function(t,v,_){"use strict";_.r(v);var r=_(42),a=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"正则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正则"}},[t._v("#")]),t._v(" 正则")]),t._v(" "),_("p",[t._v("正则一直在我眼里一直是一串天文符号，但是他的作用又是无可异议的大，")]),t._v(" "),_("p",[t._v("所以今天开始学习正则，虽犹如学习一门新语言，但冲就完事了。")]),t._v(" "),_("h2",{attrs:{id:"正则表达式到底是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式到底是什么"}},[t._v("#")]),t._v(" 正则表达式到底是什么")]),t._v(" "),_("p",[t._v("正则表达式(Regular Expression)其实就是一门工具，"),_("strong",[t._v("目的")]),t._v("是为了字符串模式匹配，从而实现搜索和替换功能。它起源于上个 20 世纪 50 年代科学家在数学领域做的一些研究工作，后来才被引入到计算机领域中。从它的命名我们可以知道，它是一种"),_("strong",[t._v("用来描述规则的表达式")]),t._v("。而它的底层原理也十分简单，就是使用状态机的思想进行模式匹配。")]),t._v(" "),_("p",[t._v("我们可以通过"),_("a",{attrs:{href:"https://regexper.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("regexper.com/"),_("OutboundLink")],1),t._v(" 来学习状态机运行")]),t._v(" "),_("p",[t._v("通过"),_("a",{attrs:{href:"https://regex101.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("regex101.com/"),_("OutboundLink")],1),t._v("来测试你写的正则")]),t._v(" "),_("p",[t._v("准备好了，那就 let’s go！")]),t._v(" "),_("h3",{attrs:{id:"单个字符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单个字符"}},[t._v("#")]),t._v(" 单个字符")]),t._v(" "),_("p",[t._v("最简单是就是 "),_("strong",[t._v("/a/")]),t._v(" 匹配字符串中的 a")]),t._v(" "),_("p",[t._v("但是有一些特殊字符 就需要搭配 **\\ ** 来匹配：如下表")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("特殊字符")]),t._v(" "),_("th",[t._v("正则表达式")]),t._v(" "),_("th",[t._v("记忆方式")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("换行符")]),t._v(" "),_("td",[t._v("\\n")]),t._v(" "),_("td",[_("strong",[t._v("n")]),t._v("ew line")])]),t._v(" "),_("tr",[_("td",[t._v("换页符")]),t._v(" "),_("td",[t._v("\\f")]),t._v(" "),_("td",[_("strong",[t._v("f")]),t._v("orm feed")])]),t._v(" "),_("tr",[_("td",[t._v("回车符")]),t._v(" "),_("td",[t._v("\\r")]),t._v(" "),_("td",[_("strong",[t._v("r")]),t._v("eturn")])]),t._v(" "),_("tr",[_("td",[t._v("空白符")]),t._v(" "),_("td",[t._v("\\s")]),t._v(" "),_("td",[_("strong",[t._v("s")]),t._v("pace")])]),t._v(" "),_("tr",[_("td",[t._v("制表符")]),t._v(" "),_("td",[t._v("\\t")]),t._v(" "),_("td",[_("strong",[t._v("t")]),t._v("ab")])]),t._v(" "),_("tr",[_("td",[t._v("垂直制表符")]),t._v(" "),_("td",[t._v("\\v")]),t._v(" "),_("td",[_("strong",[t._v("v")]),t._v("ertical tab")])]),t._v(" "),_("tr",[_("td",[t._v("回退符")]),t._v(" "),_("td",[t._v("[\\b]")]),t._v(" "),_("td",[_("strong",[t._v("b")]),t._v("ackspace,之所以使用[]符号是避免和\\b 重复")])])])]),t._v(" "),_("h3",{attrs:{id:"多个字符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多个字符"}},[t._v("#")]),t._v(" 多个字符")]),t._v(" "),_("p",[t._v("匹配集合 使用 "),_("code",[t._v("/[123]/")])]),t._v(" "),_("p",[t._v("每个字符都全部列出就显得很繁琐， 所以就可以使用 "),_("code",[t._v("/[0-9]/")]),t._v(" 匹配所有数字")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("匹配区间")]),t._v(" "),_("th",[t._v("正则表达式")]),t._v(" "),_("th",[t._v("记忆方式")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("除了换行符之外的任何字符")]),t._v(" "),_("td",[t._v(".")]),t._v(" "),_("td",[t._v("句号,除了句子结束符")])]),t._v(" "),_("tr",[_("td",[t._v("单个数字, [0-9]")]),t._v(" "),_("td",[t._v("\\d")]),t._v(" "),_("td",[_("strong",[t._v("d")]),t._v("igit")])]),t._v(" "),_("tr",[_("td",[t._v("除了[0-9]")]),t._v(" "),_("td",[t._v("\\D")]),t._v(" "),_("td",[_("strong",[t._v("not")]),t._v(" "),_("strong",[t._v("d")]),t._v("igit")])]),t._v(" "),_("tr",[_("td",[t._v("包括下划线在内的单个字符，[A-Za-z0-9_]")]),t._v(" "),_("td",[t._v("\\w")]),t._v(" "),_("td",[_("strong",[t._v("w")]),t._v("ord")])]),t._v(" "),_("tr",[_("td",[t._v("非单字字符")]),t._v(" "),_("td",[t._v("\\W")]),t._v(" "),_("td",[_("strong",[t._v("not")]),t._v(" "),_("strong",[t._v("w")]),t._v("ord")])]),t._v(" "),_("tr",[_("td",[t._v("匹配空白字符,包括空格、制表符、换页符和换行符")]),t._v(" "),_("td",[t._v("\\s")]),t._v(" "),_("td",[_("strong",[t._v("s")]),t._v("pace")])]),t._v(" "),_("tr",[_("td",[t._v("匹配非空白字符")]),t._v(" "),_("td",[t._v("\\S")]),t._v(" "),_("td",[_("strong",[t._v("not")]),t._v(" "),_("strong",[t._v("s")]),t._v("pace")])])])]),t._v(" "),_("h3",{attrs:{id:"循环和重复匹配"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#循环和重复匹配"}},[t._v("#")]),t._v(" 循环和重复匹配")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("匹配规则")]),t._v(" "),_("th",[t._v("元字符")]),t._v(" "),_("th",[t._v("联想方式")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("0 次或 1 次")]),t._v(" "),_("td",[t._v("?")]),t._v(" "),_("td",[t._v("且"),_("strong",[t._v("问")]),t._v(",此事"),_("strong",[t._v("有")]),t._v("还"),_("strong",[t._v("无")])])]),t._v(" "),_("tr",[_("td",[t._v("0 次或无数次")]),t._v(" "),_("td",[t._v("*")]),t._v(" "),_("td",[t._v("宇宙洪荒,"),_("strong",[t._v("辰宿")]),t._v("列张：宇宙伊始，从无到有，最后星宿布满星空")])]),t._v(" "),_("tr",[_("td",[t._v("1 次或无数次")]),t._v(" "),_("td",[t._v("+")]),t._v(" "),_("td",[_("strong",[t._v("一加")]),t._v(", +1")])]),t._v(" "),_("tr",[_("td",[t._v("特定次数")]),t._v(" "),_("td",[t._v("{x}, {min, max}")]),t._v(" "),_("td",[t._v("可以想象成一个数轴，从一个点，到一个射线再到线段。min 和 max 分别表示了左闭右闭区间的左界和右界")])])])]),t._v(" "),_("h3",{attrs:{id:"位置边界"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#位置边界"}},[t._v("#")]),t._v(" 位置边界")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("边界和标志")]),t._v(" "),_("th",[t._v("正则表达式")]),t._v(" "),_("th",[t._v("记忆方式")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("单词边界")]),t._v(" "),_("td",[t._v("\\b")]),t._v(" "),_("td",[_("strong",[t._v("b")]),t._v("oundary")])]),t._v(" "),_("tr",[_("td",[t._v("非单词边界")]),t._v(" "),_("td",[t._v("\\B")]),t._v(" "),_("td",[_("strong",[t._v("not")]),t._v(" "),_("strong",[t._v("b")]),t._v("oundary")])]),t._v(" "),_("tr",[_("td",[t._v("字符串开头")]),t._v(" "),_("td",[t._v("^")]),t._v(" "),_("td",[t._v("小"),_("strong",[t._v("头尖尖")]),t._v("那么大个")])]),t._v(" "),_("tr",[_("td",[t._v("字符串结尾")]),t._v(" "),_("td",[t._v("$")]),t._v(" "),_("td",[_("strong",[t._v("终结")]),t._v("者，美国科幻电影，美元符$")])]),t._v(" "),_("tr",[_("td",[t._v("多行模式")]),t._v(" "),_("td",[t._v("m 标志")]),t._v(" "),_("td",[_("strong",[t._v("m")]),t._v("ultiple of lines")])]),t._v(" "),_("tr",[_("td",[t._v("忽略大小写")]),t._v(" "),_("td",[t._v("i 标志")]),t._v(" "),_("td",[_("strong",[t._v("i")]),t._v("gnore case, case-"),_("strong",[t._v("i")]),t._v("nsensitive")])]),t._v(" "),_("tr",[_("td",[t._v("全局模式")]),t._v(" "),_("td",[t._v("g 标志")]),t._v(" "),_("td",[_("strong",[t._v("g")]),t._v("lobal")])])])]),t._v(" "),_("h4",{attrs:{id:"子表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#子表达式"}},[t._v("#")]),t._v(" 子表达式")]),t._v(" "),_("h5",{attrs:{id:"pattern"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pattern"}},[t._v("#")]),t._v(" (?:pattern)")]),t._v(" "),_("p",[t._v("非获取匹配，匹配 pattern 但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。")]),t._v(" "),_("h5",{attrs:{id:"pattern-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pattern-2"}},[t._v("#")]),t._v(" (?=pattern)")]),t._v(" "),_("p",[t._v("非获取匹配，正向肯定预查，在任何匹配 pattern 的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。")]),t._v(" "),_("h5",{attrs:{id:"pattern-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pattern-3"}},[t._v("#")]),t._v(" (?!pattern)")]),t._v(" "),_("p",[t._v("非获取匹配，正向否定预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。")]),t._v(" "),_("h5",{attrs:{id:"pattern-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pattern-4"}},[t._v("#")]),t._v(" (?<=pattern)")]),t._v(" "),_("p",[t._v("非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?<=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。")]),t._v(" "),_("h5",{attrs:{id:"pattern-5"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pattern-5"}},[t._v("#")]),t._v(" (?<!pattern)")]),t._v(" "),_("p",[t._v("非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?<!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("回溯查找")]),t._v(" "),_("th",[t._v("正则")]),t._v(" "),_("th",[t._v("记忆方式")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("引用")]),t._v(" "),_("td",[t._v("\\0,\\1,\\2 和 $0, $1, $2")]),t._v(" "),_("td",[t._v("转义+数字")])]),t._v(" "),_("tr",[_("td",[t._v("非捕获组")]),t._v(" "),_("td",[t._v("(?😃")]),t._v(" "),_("td",[t._v("引用表达式(()), 本身不被消费(?),引用(😃")])]),t._v(" "),_("tr",[_("td",[t._v("前向查找")]),t._v(" "),_("td",[t._v("(?=)")]),t._v(" "),_("td",[t._v("引用子表达式(())，本身不被消费(?), 正向的查找(=)")])]),t._v(" "),_("tr",[_("td",[t._v("前向负查找")]),t._v(" "),_("td",[t._v("(?!)")]),t._v(" "),_("td",[t._v("引用子表达式(())，本身不被消费(?), 负向的查找(!)")])]),t._v(" "),_("tr",[_("td",[t._v("后向查找")]),t._v(" "),_("td",[t._v("(?<=)")]),t._v(" "),_("td",[t._v("引用子表达式(())，本身不被消费(?), 后向的(<，开口往后)，正的查找(=)")])]),t._v(" "),_("tr",[_("td",[t._v("后向负查找")]),t._v(" "),_("td",[t._v("(?<!)")]),t._v(" "),_("td",[t._v("引用子表达式(())，本身不被消费(?), 后向的(<，开口往后)，负的查找(!)")])])])]),t._v(" "),_("h2",{attrs:{id:"js-方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js-方法"}},[t._v("#")]),t._v(" JS 方法")]),t._v(" "),_("h3",{attrs:{id:"replace-方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#replace-方法"}},[t._v("#")]),t._v(" replace() 方法")]),t._v(" "),_("div",{staticClass:"language-JavaScript extra-class"},[_("pre",{pre:!0,attrs:{class:"language-javascript"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//regexp 必需。规定子字符串或要替换的模式的 RegExp 对象。")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//replacement 必需。一个字符串值。规定了替换文本或生成替换文本的函数。")]),t._v("\nstringObject"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("substr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("replacement"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),_("p",[_("em",[t._v("replacement")]),t._v(" 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("字符")]),t._v(" "),_("th",{staticStyle:{"text-align":"left"}},[t._v("替换文本")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("$1、$2、...、$99")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。")])]),t._v(" "),_("tr",[_("td",[t._v("$&")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("与 regexp 相匹配的子串。")])]),t._v(" "),_("tr",[_("td",[t._v("$`")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("位于匹配子串左侧的文本。")])]),t._v(" "),_("tr",[_("td",[t._v("$'")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("位于匹配子串右侧的文本。")])]),t._v(" "),_("tr",[_("td",[t._v("$$")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("直接量符号。")])])])]),t._v(" "),_("h3",{attrs:{id:"match-方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#match-方法"}},[t._v("#")]),t._v(" match() 方法")]),t._v(" "),_("h4",{attrs:{id:"用法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),_("p",[t._v("match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。")]),t._v(" "),_("p",[t._v("该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。")]),t._v(" "),_("h2",{attrs:{id:"推荐阅读"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读"}},[t._v("#")]),t._v(" 推荐阅读")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.im/post/6844903845227659271#heading-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("《正则表达式不要背！》"),_("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=a.exports}}]);