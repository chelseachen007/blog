(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{580:function(t,a,s){"use strict";s.r(a);var r=s(42),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"【进阶篇-day-48】-2020-12-18-814-二叉树剪枝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【进阶篇-day-48】-2020-12-18-814-二叉树剪枝"}},[t._v("#")]),t._v(" 【进阶篇 - Day 48】 2020-12-18 - 814. 二叉树剪枝")]),t._v(" "),s("h2",{attrs:{id:"题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),s("blockquote",[s("h2",{attrs:{id:"入选理由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#入选理由"}},[t._v("#")]),t._v(" 入选理由")]),t._v(" "),s("ol",[s("li",[t._v("剪枝通常都是对递归树剪，最典型的就是回溯。而这道题就是树，让你形象化认识剪枝")])]),t._v(" "),s("h2",{attrs:{id:"题目描述-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目描述-2"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),s("p",[t._v("给定二叉树根结点 root ，此外树的每个结点的值要么是 0，要么是 1。")]),t._v(" "),s("p",[t._v("返回移除了所有不包含 1 的子树的原二叉树。")]),t._v(" "),s("p",[t._v("( 节点 X 的子树为 X 本身，以及所有 X 的后代。)")]),t._v(" "),s("p",[t._v("示例 1:\n输入: [1,null,0,0,1]\n输出: [1,null,0,null,1]")]),t._v(" "),s("p",[t._v("解释:\n只有红色节点满足条件“所有不包含 1 的子树”。\n右图为返回的答案。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://user-images.githubusercontent.com/12479470/102567075-b87c2c00-411b-11eb-8cc5-301cf229a427.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"images/102567075-b87c2c00-411b-11eb-8cc5-301cf229a427.png",alt:"image"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("示例 2:\n输入: [1,0,1,0,0,0,1]\n输出: [1,null,1,null,1]")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://user-images.githubusercontent.com/12479470/102567097-bfa33a00-411b-11eb-837d-c0e02985d220.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"images/102567097-bfa33a00-411b-11eb-837d-c0e02985d220.png",alt:"image"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("示例 3:\n输入: [1,1,0,1,1,0,1,0]\n输出: [1,1,0,1,1,null,1]")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://user-images.githubusercontent.com/12479470/102567105-c6ca4800-411b-11eb-9a72-4103132a3251.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"images/102567105-c6ca4800-411b-11eb-9a72-4103132a3251.png",alt:"image"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("说明:")]),t._v(" "),s("p",[t._v("给定的二叉树最多有 100 个节点。\n每个节点的值只会为 0 或 1 。")]),t._v(" "),s("p",[t._v("来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/binary-tree-pruning\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")])]),t._v(" "),s("h2",{attrs:{id:"我的回答"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我的回答"}},[t._v("#")]),t._v(" 我的回答")]),t._v(" "),s("h3",{attrs:{id:"解法一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解法一"}},[t._v("#")]),t._v(" 解法一")]),t._v(" "),s("h4",{attrs:{id:"时空复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时空复杂度"}},[t._v("#")]),t._v(" 时空复杂度")]),t._v(" "),s("p",[t._v("时间复杂度：O(n)")]),t._v(" "),s("p",[t._v("空间复杂度: O(1)")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("pruneTree")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pruneTree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pruneTree")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"参考回答"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考回答"}},[t._v("#")]),t._v(" 参考回答")]),t._v(" "),s("ul",[s("li")])])}),[],!1,null,null,null);a.default=n.exports}}]);